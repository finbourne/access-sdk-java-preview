/*
 * FINBOURNE Access Management API
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1954
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.access.api;

import com.finbourne.access.ApiCallback;
import com.finbourne.access.ApiClient;
import com.finbourne.access.ApiException;
import com.finbourne.access.ApiResponse;
import com.finbourne.access.Configuration;
import com.finbourne.access.Pair;
import com.finbourne.access.ProgressRequestBody;
import com.finbourne.access.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.access.model.AddToPolicyCollectionRequest;
import com.finbourne.access.model.AttachedPolicyDefinitionResponse;
import com.finbourne.access.model.EvaluationRequest;
import com.finbourne.access.model.EvaluationResponse;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.access.model.PolicyCollectionCreationRequest;
import com.finbourne.access.model.PolicyCollectionResponse;
import com.finbourne.access.model.PolicyCollectionUpdateRequest;
import com.finbourne.access.model.PolicyCreationRequest;
import com.finbourne.access.model.PolicyResponse;
import com.finbourne.access.model.PolicyUpdateRequest;
import com.finbourne.access.model.RemoveFromPolicyCollectionRequest;
import com.finbourne.access.model.ResourceListOfPolicyCollectionResponse;
import com.finbourne.access.model.ResourceListOfPolicyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoliciesApi {
    private ApiClient localVarApiClient;
    public PoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addToPolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param addToPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to add to the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addToPolicyCollectionCall(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addToPolicyCollectionRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}/add"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToPolicyCollectionValidateBeforeCall(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addToPolicyCollection(Async)");
        }
        
        // verify the required parameter 'addToPolicyCollectionRequest' is set
        if (addToPolicyCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'addToPolicyCollectionRequest' when calling addToPolicyCollection(Async)");
        }
        

        okhttp3.Call localVarCall = addToPolicyCollectionCall(code, addToPolicyCollectionRequest, scope, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] AddToPolicyCollection: Add To PolicyCollection
     * Add Policies and/or PolicyCollections to a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param addToPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to add to the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return PolicyCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyCollectionResponse addToPolicyCollection(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope) throws ApiException {
        ApiResponse<PolicyCollectionResponse> localVarResp = addToPolicyCollectionWithHttpInfo(code, addToPolicyCollectionRequest, scope);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] AddToPolicyCollection: Add To PolicyCollection
     * Add Policies and/or PolicyCollections to a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param addToPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to add to the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return ApiResponse&lt;PolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyCollectionResponse> addToPolicyCollectionWithHttpInfo(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = addToPolicyCollectionValidateBeforeCall(code, addToPolicyCollectionRequest, scope, null);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] AddToPolicyCollection: Add To PolicyCollection (asynchronously)
     * Add Policies and/or PolicyCollections to a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param addToPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to add to the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addToPolicyCollectionAsync(String code, AddToPolicyCollectionRequest addToPolicyCollectionRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = addToPolicyCollectionValidateBeforeCall(code, addToPolicyCollectionRequest, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPolicy
     * @param policyCreationRequest The definition of the Policy (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPolicyCall(PolicyCreationRequest policyCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = policyCreationRequest;

        // create path and map variables
        String localVarPath = "/api/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyValidateBeforeCall(PolicyCreationRequest policyCreationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'policyCreationRequest' is set
        if (policyCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'policyCreationRequest' when calling createPolicy(Async)");
        }
        

        okhttp3.Call localVarCall = createPolicyCall(policyCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] CreatePolicy: Create Policy
     * Creates a Policy
     * @param policyCreationRequest The definition of the Policy (required)
     * @return PolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyResponse createPolicy(PolicyCreationRequest policyCreationRequest) throws ApiException {
        ApiResponse<PolicyResponse> localVarResp = createPolicyWithHttpInfo(policyCreationRequest);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] CreatePolicy: Create Policy
     * Creates a Policy
     * @param policyCreationRequest The definition of the Policy (required)
     * @return ApiResponse&lt;PolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyResponse> createPolicyWithHttpInfo(PolicyCreationRequest policyCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(policyCreationRequest, null);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] CreatePolicy: Create Policy (asynchronously)
     * Creates a Policy
     * @param policyCreationRequest The definition of the Policy (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPolicyAsync(PolicyCreationRequest policyCreationRequest, final ApiCallback<PolicyResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = createPolicyValidateBeforeCall(policyCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPolicyCollection
     * @param policyCollectionCreationRequest The definition of the PolicyCollection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPolicyCollectionCall(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = policyCollectionCreationRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPolicyCollectionValidateBeforeCall(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'policyCollectionCreationRequest' is set
        if (policyCollectionCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'policyCollectionCreationRequest' when calling createPolicyCollection(Async)");
        }
        

        okhttp3.Call localVarCall = createPolicyCollectionCall(policyCollectionCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] CreatePolicyCollection: Create PolicyCollection
     * Creates a PolicyCollection
     * @param policyCollectionCreationRequest The definition of the PolicyCollection (required)
     * @return PolicyCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyCollectionResponse createPolicyCollection(PolicyCollectionCreationRequest policyCollectionCreationRequest) throws ApiException {
        ApiResponse<PolicyCollectionResponse> localVarResp = createPolicyCollectionWithHttpInfo(policyCollectionCreationRequest);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] CreatePolicyCollection: Create PolicyCollection
     * Creates a PolicyCollection
     * @param policyCollectionCreationRequest The definition of the PolicyCollection (required)
     * @return ApiResponse&lt;PolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyCollectionResponse> createPolicyCollectionWithHttpInfo(PolicyCollectionCreationRequest policyCollectionCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createPolicyCollectionValidateBeforeCall(policyCollectionCreationRequest, null);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] CreatePolicyCollection: Create PolicyCollection (asynchronously)
     * Creates a PolicyCollection
     * @param policyCollectionCreationRequest The definition of the PolicyCollection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPolicyCollectionAsync(PolicyCollectionCreationRequest policyCollectionCreationRequest, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = createPolicyCollectionValidateBeforeCall(policyCollectionCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolicy
     * @param code The code of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePolicy(Async)");
        }
        

        okhttp3.Call localVarCall = deletePolicyCall(code, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] DeletePolicy: Delete Policy
     * Deletes an identified Policy
     * @param code The code of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deletePolicy(String code, String scope) throws ApiException {
        deletePolicyWithHttpInfo(code, scope);
    }

    /**
     * [EARLY ACCESS] DeletePolicy: Delete Policy
     * Deletes an identified Policy
     * @param code The code of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePolicyWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(code, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EARLY ACCESS] DeletePolicy: Delete Policy (asynchronously)
     * Deletes an identified Policy
     * @param code The code of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyAsync(String code, String scope, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(code, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyCollectionCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyCollectionValidateBeforeCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePolicyCollection(Async)");
        }
        

        okhttp3.Call localVarCall = deletePolicyCollectionCall(code, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] DeletePolicyCollection: Delete PolicyCollection
     * Deletes an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deletePolicyCollection(String code, String scope) throws ApiException {
        deletePolicyCollectionWithHttpInfo(code, scope);
    }

    /**
     * [EARLY ACCESS] DeletePolicyCollection: Delete PolicyCollection
     * Deletes an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePolicyCollectionWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyCollectionValidateBeforeCall(code, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EARLY ACCESS] DeletePolicyCollection: Delete PolicyCollection (asynchronously)
     * Deletes an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyCollectionAsync(String code, String scope, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyCollectionValidateBeforeCall(code, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluate
     * @param requestBody A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation). (required)
     * @param applications Optional. The application type of the roles and policies to use when evaluating. (optional)
     * @param asAt Optional. The requested AsAt date of the entitlements (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateCall(Map<String, EvaluationRequest> requestBody, List<String> applications, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "applications", applications));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateValidateBeforeCall(Map<String, EvaluationRequest> requestBody, List<String> applications, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling evaluate(Async)");
        }
        

        okhttp3.Call localVarCall = evaluateCall(requestBody, applications, asAt, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] Evaluate: Run one or more evaluations
     * Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
     * @param requestBody A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation). (required)
     * @param applications Optional. The application type of the roles and policies to use when evaluating. (optional)
     * @param asAt Optional. The requested AsAt date of the entitlements (optional)
     * @return Map&lt;String, EvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, EvaluationResponse> evaluate(Map<String, EvaluationRequest> requestBody, List<String> applications, OffsetDateTime asAt) throws ApiException {
        ApiResponse<Map<String, EvaluationResponse>> localVarResp = evaluateWithHttpInfo(requestBody, applications, asAt);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] Evaluate: Run one or more evaluations
     * Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
     * @param requestBody A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation). (required)
     * @param applications Optional. The application type of the roles and policies to use when evaluating. (optional)
     * @param asAt Optional. The requested AsAt date of the entitlements (optional)
     * @return ApiResponse&lt;Map&lt;String, EvaluationResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, EvaluationResponse>> evaluateWithHttpInfo(Map<String, EvaluationRequest> requestBody, List<String> applications, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = evaluateValidateBeforeCall(requestBody, applications, asAt, null);
        Type localVarReturnType = new TypeToken<Map<String, EvaluationResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] Evaluate: Run one or more evaluations (asynchronously)
     * Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
     * @param requestBody A dictionary of evaluations, keyed using any arbitrary correlation id (it will be returned with the response for that evaluation). (required)
     * @param applications Optional. The application type of the roles and policies to use when evaluating. (optional)
     * @param asAt Optional. The requested AsAt date of the entitlements (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Run an evaluation against the current user&#39;s entitlements </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluateAsync(Map<String, EvaluationRequest> requestBody, List<String> applications, OffsetDateTime asAt, final ApiCallback<Map<String, EvaluationResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = evaluateValidateBeforeCall(requestBody, applications, asAt, _callback);
        Type localVarReturnType = new TypeToken<Map<String, EvaluationResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOwnPolicies
     * @param applications Optional. Filter on the applications that the policies apply to (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnPoliciesCall(List<String> applications, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "applications", applications));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOwnPoliciesValidateBeforeCall(List<String> applications, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getOwnPoliciesCall(applications, asAt, sortBy, start, limit, filter, _callback);
        return localVarCall;

    }

    /**
     * GetOwnPolicies: Get policies of requesting user
     * Gets all Policies for the current user
     * @param applications Optional. Filter on the applications that the policies apply to (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return List&lt;AttachedPolicyDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<AttachedPolicyDefinitionResponse> getOwnPolicies(List<String> applications, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        ApiResponse<List<AttachedPolicyDefinitionResponse>> localVarResp = getOwnPoliciesWithHttpInfo(applications, asAt, sortBy, start, limit, filter);
        return localVarResp.getData();
    }

    /**
     * GetOwnPolicies: Get policies of requesting user
     * Gets all Policies for the current user
     * @param applications Optional. Filter on the applications that the policies apply to (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return ApiResponse&lt;List&lt;AttachedPolicyDefinitionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AttachedPolicyDefinitionResponse>> getOwnPoliciesWithHttpInfo(List<String> applications, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = getOwnPoliciesValidateBeforeCall(applications, asAt, sortBy, start, limit, filter, null);
        Type localVarReturnType = new TypeToken<List<AttachedPolicyDefinitionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetOwnPolicies: Get policies of requesting user (asynchronously)
     * Gets all Policies for the current user
     * @param applications Optional. Filter on the applications that the policies apply to (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get policies and licences of current user </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOwnPoliciesAsync(List<String> applications, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<List<AttachedPolicyDefinitionResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = getOwnPoliciesValidateBeforeCall(applications, asAt, sortBy, start, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<List<AttachedPolicyDefinitionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPolicy
     * @param code The code of the Policy (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPolicy(Async)");
        }
        

        okhttp3.Call localVarCall = getPolicyCall(code, asAt, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] GetPolicy: Get Policy
     * Gets an identified Policy
     * @param code The code of the Policy (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @return PolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyResponse getPolicy(String code, OffsetDateTime asAt, String scope) throws ApiException {
        ApiResponse<PolicyResponse> localVarResp = getPolicyWithHttpInfo(code, asAt, scope);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] GetPolicy: Get Policy
     * Gets an identified Policy
     * @param code The code of the Policy (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @return ApiResponse&lt;PolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyResponse> getPolicyWithHttpInfo(String code, OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(code, asAt, scope, null);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] GetPolicy: Get Policy (asynchronously)
     * Gets an identified Policy
     * @param code The code of the Policy (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific Policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyAsync(String code, OffsetDateTime asAt, String scope, final ApiCallback<PolicyResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(code, asAt, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyCollectionCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyCollectionValidateBeforeCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPolicyCollection(Async)");
        }
        

        okhttp3.Call localVarCall = getPolicyCollectionCall(code, asAt, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] GetPolicyCollection: Get PolicyCollection
     * Gets an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return PolicyCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyCollectionResponse getPolicyCollection(String code, OffsetDateTime asAt, String scope) throws ApiException {
        ApiResponse<PolicyCollectionResponse> localVarResp = getPolicyCollectionWithHttpInfo(code, asAt, scope);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] GetPolicyCollection: Get PolicyCollection
     * Gets an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return ApiResponse&lt;PolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyCollectionResponse> getPolicyCollectionWithHttpInfo(String code, OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = getPolicyCollectionValidateBeforeCall(code, asAt, scope, null);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] GetPolicyCollection: Get PolicyCollection (asynchronously)
     * Gets an identified PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyCollectionAsync(String code, OffsetDateTime asAt, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = getPolicyCollectionValidateBeforeCall(code, asAt, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPolicies
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesCall(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPoliciesValidateBeforeCall(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPoliciesCall(scope, asAt, sortBy, start, limit, filter, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] ListPolicies: List Policies
     * Gets all Policies in a scope
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return List&lt;PolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyResponse> listPolicies(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        ApiResponse<List<PolicyResponse>> localVarResp = listPoliciesWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] ListPolicies: List Policies
     * Gets all Policies in a scope
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return ApiResponse&lt;List&lt;PolicyResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyResponse>> listPoliciesWithHttpInfo(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(scope, asAt, sortBy, start, limit, filter, null);
        Type localVarReturnType = new TypeToken<List<PolicyResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] ListPolicies: List Policies (asynchronously)
     * Gets all Policies in a scope
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesAsync(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<List<PolicyResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(scope, asAt, sortBy, start, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPolicyCollections
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPolicyCollectionsCall(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPolicyCollectionsValidateBeforeCall(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPolicyCollectionsCall(scope, asAt, sortBy, start, limit, filter, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] ListPolicyCollections: List PolicyCollections
     * Gets all PolicyCollections in a scope
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return List&lt;PolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyCollectionResponse> listPolicyCollections(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        ApiResponse<List<PolicyCollectionResponse>> localVarResp = listPolicyCollectionsWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] ListPolicyCollections: List PolicyCollections
     * Gets all PolicyCollections in a scope
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return ApiResponse&lt;List&lt;PolicyCollectionResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyCollectionResponse>> listPolicyCollectionsWithHttpInfo(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listPolicyCollectionsValidateBeforeCall(scope, asAt, sortBy, start, limit, filter, null);
        Type localVarReturnType = new TypeToken<List<PolicyCollectionResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] ListPolicyCollections: List PolicyCollections (asynchronously)
     * Gets all PolicyCollections in a scope
     * @param scope Optional. Will use the default scope if not provided. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPolicyCollectionsAsync(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<List<PolicyCollectionResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listPolicyCollectionsValidateBeforeCall(scope, asAt, sortBy, start, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyCollectionResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagePolicies
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagePoliciesCall(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policies/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagePoliciesValidateBeforeCall(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pagePoliciesCall(asAt, sortBy, limit, filter, page, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] PagePolicies: Page Policies
     * Gets all PolicyCollections in a scope in pages. Under development.
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @return ResourceListOfPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfPolicyResponse pagePolicies(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page) throws ApiException {
        ApiResponse<ResourceListOfPolicyResponse> localVarResp = pagePoliciesWithHttpInfo(asAt, sortBy, limit, filter, page);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] PagePolicies: Page Policies
     * Gets all PolicyCollections in a scope in pages. Under development.
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @return ApiResponse&lt;ResourceListOfPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfPolicyResponse> pagePoliciesWithHttpInfo(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page) throws ApiException {
        okhttp3.Call localVarCall = pagePoliciesValidateBeforeCall(asAt, sortBy, limit, filter, page, null);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] PagePolicies: Page Policies (asynchronously)
     * Gets all PolicyCollections in a scope in pages. Under development.
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of Policies </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagePoliciesAsync(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page, final ApiCallback<ResourceListOfPolicyResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = pagePoliciesValidateBeforeCall(asAt, sortBy, limit, filter, page, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagePolicyCollections
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagePolicyCollectionsCall(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policycollections/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagePolicyCollectionsValidateBeforeCall(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pagePolicyCollectionsCall(asAt, sortBy, limit, filter, page, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] PagePolicyCollections: Page PolicyCollections
     * Gets all PolicyCollections in a scope in pages. Under development.
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @return ResourceListOfPolicyCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfPolicyCollectionResponse pagePolicyCollections(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page) throws ApiException {
        ApiResponse<ResourceListOfPolicyCollectionResponse> localVarResp = pagePolicyCollectionsWithHttpInfo(asAt, sortBy, limit, filter, page);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] PagePolicyCollections: Page PolicyCollections
     * Gets all PolicyCollections in a scope in pages. Under development.
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @return ApiResponse&lt;ResourceListOfPolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfPolicyCollectionResponse> pagePolicyCollectionsWithHttpInfo(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page) throws ApiException {
        okhttp3.Call localVarCall = pagePolicyCollectionsValidateBeforeCall(asAt, sortBy, limit, filter, page, null);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] PagePolicyCollections: Page PolicyCollections (asynchronously)
     * Gets all PolicyCollections in a scope in pages. Under development.
     * @param asAt Optional. Not currently used. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param limit Optional. 2000 if not provided. When paginating, limit the number of returned results to this many (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param page Optional. Paging token returned from a previous result (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested list of PolicyCollections </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagePolicyCollectionsAsync(OffsetDateTime asAt, String sortBy, Integer limit, String filter, String page, final ApiCallback<ResourceListOfPolicyCollectionResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = pagePolicyCollectionsValidateBeforeCall(asAt, sortBy, limit, filter, page, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfPolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFromPolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param removeFromPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFromPolicyCollectionCall(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = removeFromPolicyCollectionRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}/remove"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromPolicyCollectionValidateBeforeCall(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling removeFromPolicyCollection(Async)");
        }
        
        // verify the required parameter 'removeFromPolicyCollectionRequest' is set
        if (removeFromPolicyCollectionRequest == null) {
            throw new ApiException("Missing the required parameter 'removeFromPolicyCollectionRequest' when calling removeFromPolicyCollection(Async)");
        }
        

        okhttp3.Call localVarCall = removeFromPolicyCollectionCall(code, removeFromPolicyCollectionRequest, scope, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] RemoveFromPolicyCollection: Remove From PolicyCollection
     * Remove Policies and/or PolicyCollections from a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param removeFromPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return PolicyCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyCollectionResponse removeFromPolicyCollection(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope) throws ApiException {
        ApiResponse<PolicyCollectionResponse> localVarResp = removeFromPolicyCollectionWithHttpInfo(code, removeFromPolicyCollectionRequest, scope);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] RemoveFromPolicyCollection: Remove From PolicyCollection
     * Remove Policies and/or PolicyCollections from a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param removeFromPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return ApiResponse&lt;PolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyCollectionResponse> removeFromPolicyCollectionWithHttpInfo(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = removeFromPolicyCollectionValidateBeforeCall(code, removeFromPolicyCollectionRequest, scope, null);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] RemoveFromPolicyCollection: Remove From PolicyCollection (asynchronously)
     * Remove Policies and/or PolicyCollections from a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param removeFromPolicyCollectionRequest Ids of the PolicyCollections and/or Policies to remove from the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFromPolicyCollectionAsync(String code, RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = removeFromPolicyCollectionValidateBeforeCall(code, removeFromPolicyCollectionRequest, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePolicy
     * @param code The code of the Policy (required)
     * @param policyUpdateRequest The updated definition of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePolicyCall(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = policyUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/policies/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyValidateBeforeCall(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePolicy(Async)");
        }
        
        // verify the required parameter 'policyUpdateRequest' is set
        if (policyUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'policyUpdateRequest' when calling updatePolicy(Async)");
        }
        

        okhttp3.Call localVarCall = updatePolicyCall(code, policyUpdateRequest, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] UpdatePolicy: Update Policy
     * Updates a Policy
     * @param code The code of the Policy (required)
     * @param policyUpdateRequest The updated definition of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @return PolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyResponse updatePolicy(String code, PolicyUpdateRequest policyUpdateRequest, String scope) throws ApiException {
        ApiResponse<PolicyResponse> localVarResp = updatePolicyWithHttpInfo(code, policyUpdateRequest, scope);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] UpdatePolicy: Update Policy
     * Updates a Policy
     * @param code The code of the Policy (required)
     * @param policyUpdateRequest The updated definition of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @return ApiResponse&lt;PolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyResponse> updatePolicyWithHttpInfo(String code, PolicyUpdateRequest policyUpdateRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(code, policyUpdateRequest, scope, null);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] UpdatePolicy: Update Policy (asynchronously)
     * Updates a Policy
     * @param code The code of the Policy (required)
     * @param policyUpdateRequest The updated definition of the Policy (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the Policy (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated policy </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePolicyAsync(String code, PolicyUpdateRequest policyUpdateRequest, String scope, final ApiCallback<PolicyResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyValidateBeforeCall(code, policyUpdateRequest, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param policyCollectionUpdateRequest The updated definition of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePolicyCollectionCall(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = policyCollectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/policycollections/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1954");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePolicyCollectionValidateBeforeCall(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePolicyCollection(Async)");
        }
        
        // verify the required parameter 'policyCollectionUpdateRequest' is set
        if (policyCollectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'policyCollectionUpdateRequest' when calling updatePolicyCollection(Async)");
        }
        

        okhttp3.Call localVarCall = updatePolicyCollectionCall(code, policyCollectionUpdateRequest, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] UpdatePolicyCollection: Update PolicyCollection
     * Updates a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param policyCollectionUpdateRequest The updated definition of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return PolicyCollectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PolicyCollectionResponse updatePolicyCollection(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope) throws ApiException {
        ApiResponse<PolicyCollectionResponse> localVarResp = updatePolicyCollectionWithHttpInfo(code, policyCollectionUpdateRequest, scope);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] UpdatePolicyCollection: Update PolicyCollection
     * Updates a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param policyCollectionUpdateRequest The updated definition of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @return ApiResponse&lt;PolicyCollectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyCollectionResponse> updatePolicyCollectionWithHttpInfo(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyCollectionValidateBeforeCall(code, policyCollectionUpdateRequest, scope, null);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] UpdatePolicyCollection: Update PolicyCollection (asynchronously)
     * Updates a PolicyCollection
     * @param code The code of the PolicyCollection (required)
     * @param policyCollectionUpdateRequest The updated definition of the PolicyCollection (required)
     * @param scope Optional. Will use the default scope if not provided. The scope of the PolicyCollection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated PolicyCollection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePolicyCollectionAsync(String code, PolicyCollectionUpdateRequest policyCollectionUpdateRequest, String scope, final ApiCallback<PolicyCollectionResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = updatePolicyCollectionValidateBeforeCall(code, policyCollectionUpdateRequest, scope, _callback);
        Type localVarReturnType = new TypeToken<PolicyCollectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
