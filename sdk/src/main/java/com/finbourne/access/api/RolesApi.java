/*
 * FINBOURNE Access Management API
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1988
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.access.api;

import com.finbourne.access.ApiCallback;
import com.finbourne.access.ApiClient;
import com.finbourne.access.ApiException;
import com.finbourne.access.ApiResponse;
import com.finbourne.access.Configuration;
import com.finbourne.access.Pair;
import com.finbourne.access.ProgressRequestBody;
import com.finbourne.access.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.access.model.AddPolicyCollectionToRoleRequest;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.access.model.RoleCreationRequest;
import com.finbourne.access.model.RoleResponse;
import com.finbourne.access.model.RoleUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient localVarApiClient;
    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addPolicyCollectionToRole
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param addPolicyCollectionToRoleRequest The policy collections to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AddPolicyCollectionToRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPolicyCollectionToRoleCall(String scope, String code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addPolicyCollectionToRoleRequest;

        // create path and map variables
        String localVarPath = "/api/roles/{scope}/{code}/policycollections"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPolicyCollectionToRoleValidateBeforeCall(String scope, String code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling addPolicyCollectionToRole(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addPolicyCollectionToRole(Async)");
        }
        
        // verify the required parameter 'addPolicyCollectionToRoleRequest' is set
        if (addPolicyCollectionToRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'addPolicyCollectionToRoleRequest' when calling addPolicyCollectionToRole(Async)");
        }
        

        okhttp3.Call localVarCall = addPolicyCollectionToRoleCall(scope, code, addPolicyCollectionToRoleRequest, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] AddPolicyCollectionToRole: Add policy collections to a role
     * Assigns policy collections to a role
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param addPolicyCollectionToRoleRequest The policy collections to add (required)
     * @return RoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AddPolicyCollectionToRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleResponse addPolicyCollectionToRole(String scope, String code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest) throws ApiException {
        ApiResponse<RoleResponse> localVarResp = addPolicyCollectionToRoleWithHttpInfo(scope, code, addPolicyCollectionToRoleRequest);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] AddPolicyCollectionToRole: Add policy collections to a role
     * Assigns policy collections to a role
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param addPolicyCollectionToRoleRequest The policy collections to add (required)
     * @return ApiResponse&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AddPolicyCollectionToRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleResponse> addPolicyCollectionToRoleWithHttpInfo(String scope, String code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = addPolicyCollectionToRoleValidateBeforeCall(scope, code, addPolicyCollectionToRoleRequest, null);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] AddPolicyCollectionToRole: Add policy collections to a role (asynchronously)
     * Assigns policy collections to a role
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param addPolicyCollectionToRoleRequest The policy collections to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AddPolicyCollectionToRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPolicyCollectionToRoleAsync(String scope, String code, AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest, final ApiCallback<RoleResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = addPolicyCollectionToRoleValidateBeforeCall(scope, code, addPolicyCollectionToRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRole
     * @param roleCreationRequest The definition of the Role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(RoleCreationRequest roleCreationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = roleCreationRequest;

        // create path and map variables
        String localVarPath = "/api/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(RoleCreationRequest roleCreationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleCreationRequest' is set
        if (roleCreationRequest == null) {
            throw new ApiException("Missing the required parameter 'roleCreationRequest' when calling createRole(Async)");
        }
        

        okhttp3.Call localVarCall = createRoleCall(roleCreationRequest, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] CreateRole: Create Role
     * Creates a Role
     * @param roleCreationRequest The definition of the Role (required)
     * @return RoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleResponse createRole(RoleCreationRequest roleCreationRequest) throws ApiException {
        ApiResponse<RoleResponse> localVarResp = createRoleWithHttpInfo(roleCreationRequest);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] CreateRole: Create Role
     * Creates a Role
     * @param roleCreationRequest The definition of the Role (required)
     * @return ApiResponse&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleResponse> createRoleWithHttpInfo(RoleCreationRequest roleCreationRequest) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(roleCreationRequest, null);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] CreateRole: Create Role (asynchronously)
     * Creates a Role
     * @param roleCreationRequest The definition of the Role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(RoleCreationRequest roleCreationRequest, final ApiCallback<RoleResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(roleCreationRequest, _callback);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param code The code of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/roles/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String code, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleCall(code, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] DeleteRole: Delete Role
     * Deletes an identified Role
     * @param code The code of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(String code, String scope) throws ApiException {
        deleteRoleWithHttpInfo(code, scope);
    }

    /**
     * [EARLY ACCESS] DeleteRole: Delete Role
     * Deletes an identified Role
     * @param code The code of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(String code, String scope) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(code, scope, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * [EARLY ACCESS] DeleteRole: Delete Role (asynchronously)
     * Deletes an identified Role
     * @param code The code of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String code, String scope, final ApiCallback<Void> _callback) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(code, scope, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param code The code of the Role (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/roles/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(String code, OffsetDateTime asAt, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRole(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleCall(code, asAt, scope, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] GetRole: Get Role
     * Gets an identified Role
     * @param code The code of the Role (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @return RoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleResponse getRole(String code, OffsetDateTime asAt, String scope) throws ApiException {
        ApiResponse<RoleResponse> localVarResp = getRoleWithHttpInfo(code, asAt, scope);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] GetRole: Get Role
     * Gets an identified Role
     * @param code The code of the Role (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @return ApiResponse&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleResponse> getRoleWithHttpInfo(String code, OffsetDateTime asAt, String scope) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(code, asAt, scope, null);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] GetRole: Get Role (asynchronously)
     * Gets an identified Role
     * @param code The code of the Role (required)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param scope Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(String code, OffsetDateTime asAt, String scope, final ApiCallback<RoleResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(code, asAt, scope, _callback);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoles
     * @param scope Optional. Will use all scopes if not supplied. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Roles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesCall(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (sortBy != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sortBy", sortBy));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRolesValidateBeforeCall(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRolesCall(scope, asAt, sortBy, start, limit, filter, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] ListRoles: List Roles
     * Gets all Roles in a scope
     * @param scope Optional. Will use all scopes if not supplied. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return List&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Roles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleResponse> listRoles(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        ApiResponse<List<RoleResponse>> localVarResp = listRolesWithHttpInfo(scope, asAt, sortBy, start, limit, filter);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] ListRoles: List Roles
     * Gets all Roles in a scope
     * @param scope Optional. Will use all scopes if not supplied. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @return ApiResponse&lt;List&lt;RoleResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Roles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleResponse>> listRolesWithHttpInfo(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(scope, asAt, sortBy, start, limit, filter, null);
        Type localVarReturnType = new TypeToken<List<RoleResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] ListRoles: List Roles (asynchronously)
     * Gets all Roles in a scope
     * @param scope Optional. Will use all scopes if not supplied. The requested scope (optional)
     * @param asAt Optional. The AsAt date time of the data (optional)
     * @param sortBy Optional. Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName (optional)
     * @param start Optional. When paginating, skip this number of results (optional)
     * @param limit Optional. When paginating, limit the number of returned results to this many. (optional)
     * @param filter Optional. Expression to filter the result set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Roles </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesAsync(String scope, OffsetDateTime asAt, List<String> sortBy, Integer start, Integer limit, String filter, final ApiCallback<List<RoleResponse>> _callback) throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(scope, asAt, sortBy, start, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<List<RoleResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePolicyCollectionFromRole
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param policycollectionscope The scope of policy collection to remove from the Role (required)
     * @param policycollectioncode The code of the policy collection to remove from the Role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RemovePolicyCollectionFromRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePolicyCollectionFromRoleCall(String scope, String code, String policycollectionscope, String policycollectioncode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/roles/{scope}/{code}/policycollections/{policycollectionscope}/{policycollectioncode}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()))
            .replaceAll("\\{" + "policycollectionscope" + "\\}", localVarApiClient.escapeString(policycollectionscope.toString()))
            .replaceAll("\\{" + "policycollectioncode" + "\\}", localVarApiClient.escapeString(policycollectioncode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePolicyCollectionFromRoleValidateBeforeCall(String scope, String code, String policycollectionscope, String policycollectioncode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling removePolicyCollectionFromRole(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling removePolicyCollectionFromRole(Async)");
        }
        
        // verify the required parameter 'policycollectionscope' is set
        if (policycollectionscope == null) {
            throw new ApiException("Missing the required parameter 'policycollectionscope' when calling removePolicyCollectionFromRole(Async)");
        }
        
        // verify the required parameter 'policycollectioncode' is set
        if (policycollectioncode == null) {
            throw new ApiException("Missing the required parameter 'policycollectioncode' when calling removePolicyCollectionFromRole(Async)");
        }
        

        okhttp3.Call localVarCall = removePolicyCollectionFromRoleCall(scope, code, policycollectionscope, policycollectioncode, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] RemovePolicyCollectionFromRole: Remove policy collection from role
     * Removes a policy collection from a role
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param policycollectionscope The scope of policy collection to remove from the Role (required)
     * @param policycollectioncode The code of the policy collection to remove from the Role (required)
     * @return RoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RemovePolicyCollectionFromRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleResponse removePolicyCollectionFromRole(String scope, String code, String policycollectionscope, String policycollectioncode) throws ApiException {
        ApiResponse<RoleResponse> localVarResp = removePolicyCollectionFromRoleWithHttpInfo(scope, code, policycollectionscope, policycollectioncode);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] RemovePolicyCollectionFromRole: Remove policy collection from role
     * Removes a policy collection from a role
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param policycollectionscope The scope of policy collection to remove from the Role (required)
     * @param policycollectioncode The code of the policy collection to remove from the Role (required)
     * @return ApiResponse&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RemovePolicyCollectionFromRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleResponse> removePolicyCollectionFromRoleWithHttpInfo(String scope, String code, String policycollectionscope, String policycollectioncode) throws ApiException {
        okhttp3.Call localVarCall = removePolicyCollectionFromRoleValidateBeforeCall(scope, code, policycollectionscope, policycollectioncode, null);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] RemovePolicyCollectionFromRole: Remove policy collection from role (asynchronously)
     * Removes a policy collection from a role
     * @param scope The scope of the Role (required)
     * @param code The code of the Role (required)
     * @param policycollectionscope The scope of policy collection to remove from the Role (required)
     * @param policycollectioncode The code of the policy collection to remove from the Role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RemovePolicyCollectionFromRole </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePolicyCollectionFromRoleAsync(String scope, String code, String policycollectionscope, String policycollectioncode, final ApiCallback<RoleResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = removePolicyCollectionFromRoleValidateBeforeCall(scope, code, policycollectionscope, policycollectioncode, _callback);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param code The code of the Role (required)
     * @param roleUpdateRequest The updated definition of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param beforeScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param beforeCode Optional. The code of the Role (optional)
     * @param afterScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param afterCode Optional. The code of the Role (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(String code, RoleUpdateRequest roleUpdateRequest, String scope, String beforeScope, String beforeCode, String afterScope, String afterCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = roleUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/roles/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (beforeScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeScope", beforeScope));
        }

        if (beforeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("beforeCode", beforeCode));
        }

        if (afterScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterScope", afterScope));
        }

        if (afterCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterCode", afterCode));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.0.1988");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String code, RoleUpdateRequest roleUpdateRequest, String scope, String beforeScope, String beforeCode, String afterScope, String afterCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateRole(Async)");
        }
        
        // verify the required parameter 'roleUpdateRequest' is set
        if (roleUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'roleUpdateRequest' when calling updateRole(Async)");
        }
        

        okhttp3.Call localVarCall = updateRoleCall(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] UpdateRole: Update Role
     * Updates a Role
     * @param code The code of the Role (required)
     * @param roleUpdateRequest The updated definition of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param beforeScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param beforeCode Optional. The code of the Role (optional)
     * @param afterScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param afterCode Optional. The code of the Role (optional)
     * @return RoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RoleResponse updateRole(String code, RoleUpdateRequest roleUpdateRequest, String scope, String beforeScope, String beforeCode, String afterScope, String afterCode) throws ApiException {
        ApiResponse<RoleResponse> localVarResp = updateRoleWithHttpInfo(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] UpdateRole: Update Role
     * Updates a Role
     * @param code The code of the Role (required)
     * @param roleUpdateRequest The updated definition of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param beforeScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param beforeCode Optional. The code of the Role (optional)
     * @param afterScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param afterCode Optional. The code of the Role (optional)
     * @return ApiResponse&lt;RoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleResponse> updateRoleWithHttpInfo(String code, RoleUpdateRequest roleUpdateRequest, String scope, String beforeScope, String beforeCode, String afterScope, String afterCode) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode, null);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] UpdateRole: Update Role (asynchronously)
     * Updates a Role
     * @param code The code of the Role (required)
     * @param roleUpdateRequest The updated definition of the Role (required)
     * @param scope &gt;Optional. Will use default scope if not supplied. The scope of the Role (optional)
     * @param beforeScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param beforeCode Optional. The code of the Role (optional)
     * @param afterScope Optional. The scope of the Role. Will use default scope if not supplied. (optional)
     * @param afterCode Optional. The code of the Role (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated Role </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(String code, RoleUpdateRequest roleUpdateRequest, String scope, String beforeScope, String beforeCode, String afterScope, String afterCode, final ApiCallback<RoleResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode, _callback);
        Type localVarReturnType = new TypeToken<RoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
