/*
 * FINBOURNE Access Management API
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1950
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.access.api;

import com.finbourne.access.ApiException;
import com.finbourne.access.model.AddToPolicyCollectionRequest;
import com.finbourne.access.model.AttachedPolicyDefinitionResponse;
import com.finbourne.access.model.EvaluationRequest;
import com.finbourne.access.model.EvaluationResponse;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.access.model.PolicyCollectionCreationRequest;
import com.finbourne.access.model.PolicyCollectionResponse;
import com.finbourne.access.model.PolicyCollectionUpdateRequest;
import com.finbourne.access.model.PolicyCreationRequest;
import com.finbourne.access.model.PolicyResponse;
import com.finbourne.access.model.PolicyUpdateRequest;
import com.finbourne.access.model.RemoveFromPolicyCollectionRequest;
import com.finbourne.access.model.ResourceListOfPolicyCollectionResponse;
import com.finbourne.access.model.ResourceListOfPolicyResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoliciesApi
 */
@Ignore
public class PoliciesApiTest {

    private final PoliciesApi api = new PoliciesApi();

    
    /**
     * [EXPERIMENTAL] AddToPolicyCollection: Add To PolicyCollection
     *
     * Add Policies and/or PolicyCollections to a PolicyCollection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addToPolicyCollectionTest() throws ApiException {
        String code = null;
        AddToPolicyCollectionRequest addToPolicyCollectionRequest = null;
        String scope = null;
        PolicyCollectionResponse response = api.addToPolicyCollection(code, addToPolicyCollectionRequest, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] CreatePolicy: Create Policy
     *
     * Creates a Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyTest() throws ApiException {
        PolicyCreationRequest policyCreationRequest = null;
        PolicyResponse response = api.createPolicy(policyCreationRequest);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] CreatePolicyCollection: Create PolicyCollection
     *
     * Creates a PolicyCollection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPolicyCollectionTest() throws ApiException {
        PolicyCollectionCreationRequest policyCollectionCreationRequest = null;
        PolicyCollectionResponse response = api.createPolicyCollection(policyCollectionCreationRequest);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] DeletePolicy: Delete Policy
     *
     * Deletes an identified Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String code = null;
        String scope = null;
        api.deletePolicy(code, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] DeletePolicyCollection: Delete PolicyCollection
     *
     * Deletes an identified PolicyCollection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePolicyCollectionTest() throws ApiException {
        String code = null;
        String scope = null;
        api.deletePolicyCollection(code, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] Evaluate: Run one or more evaluations
     *
     * Given a dictionary of evaluation requests (keyed by any arbitrary correlation identifier), each will be evaluated according to the current user&#39;s policies (deduced from the provided OAuth token).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evaluateTest() throws ApiException {
        Map<String, EvaluationRequest> requestBody = null;
        List<String> applications = null;
        OffsetDateTime asAt = null;
        Map<String, EvaluationResponse> response = api.evaluate(requestBody, applications, asAt);

        // TODO: test validations
    }
    
    /**
     * GetOwnPolicies: Get policies of requesting user
     *
     * Gets all Policies for the current user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOwnPoliciesTest() throws ApiException {
        List<String> applications = null;
        OffsetDateTime asAt = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<AttachedPolicyDefinitionResponse> response = api.getOwnPolicies(applications, asAt, sortBy, start, limit, filter);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] GetPolicy: Get Policy
     *
     * Gets an identified Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPolicyTest() throws ApiException {
        String code = null;
        OffsetDateTime asAt = null;
        String scope = null;
        PolicyResponse response = api.getPolicy(code, asAt, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] GetPolicyCollection: Get PolicyCollection
     *
     * Gets an identified PolicyCollection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPolicyCollectionTest() throws ApiException {
        String code = null;
        OffsetDateTime asAt = null;
        String scope = null;
        PolicyCollectionResponse response = api.getPolicyCollection(code, asAt, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] ListPolicies: List Policies
     *
     * Gets all Policies in a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        String scope = null;
        OffsetDateTime asAt = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<PolicyResponse> response = api.listPolicies(scope, asAt, sortBy, start, limit, filter);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] ListPolicyCollections: List PolicyCollections
     *
     * Gets all PolicyCollections in a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPolicyCollectionsTest() throws ApiException {
        String scope = null;
        OffsetDateTime asAt = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<PolicyCollectionResponse> response = api.listPolicyCollections(scope, asAt, sortBy, start, limit, filter);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] PagePolicies: Page Policies
     *
     * Gets all PolicyCollections in a scope in pages. Under development.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pagePoliciesTest() throws ApiException {
        OffsetDateTime asAt = null;
        String sortBy = null;
        Integer limit = null;
        String filter = null;
        String page = null;
        ResourceListOfPolicyResponse response = api.pagePolicies(asAt, sortBy, limit, filter, page);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] PagePolicyCollections: Page PolicyCollections
     *
     * Gets all PolicyCollections in a scope in pages. Under development.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pagePolicyCollectionsTest() throws ApiException {
        OffsetDateTime asAt = null;
        String sortBy = null;
        Integer limit = null;
        String filter = null;
        String page = null;
        ResourceListOfPolicyCollectionResponse response = api.pagePolicyCollections(asAt, sortBy, limit, filter, page);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] RemoveFromPolicyCollection: Remove From PolicyCollection
     *
     * Remove Policies and/or PolicyCollections from a PolicyCollection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeFromPolicyCollectionTest() throws ApiException {
        String code = null;
        RemoveFromPolicyCollectionRequest removeFromPolicyCollectionRequest = null;
        String scope = null;
        PolicyCollectionResponse response = api.removeFromPolicyCollection(code, removeFromPolicyCollectionRequest, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] UpdatePolicy: Update Policy
     *
     * Updates a Policy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePolicyTest() throws ApiException {
        String code = null;
        PolicyUpdateRequest policyUpdateRequest = null;
        String scope = null;
        PolicyResponse response = api.updatePolicy(code, policyUpdateRequest, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] UpdatePolicyCollection: Update PolicyCollection
     *
     * Updates a PolicyCollection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePolicyCollectionTest() throws ApiException {
        String code = null;
        PolicyCollectionUpdateRequest policyCollectionUpdateRequest = null;
        String scope = null;
        PolicyCollectionResponse response = api.updatePolicyCollection(code, policyCollectionUpdateRequest, scope);

        // TODO: test validations
    }
    
}
