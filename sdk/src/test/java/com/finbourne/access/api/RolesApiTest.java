/*
 * FINBOURNE Access Management API
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1950
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.access.api;

import com.finbourne.access.ApiException;
import com.finbourne.access.model.AddPolicyCollectionToRoleRequest;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.access.model.RoleCreationRequest;
import com.finbourne.access.model.RoleResponse;
import com.finbourne.access.model.RoleUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
@Ignore
public class RolesApiTest {

    private final RolesApi api = new RolesApi();

    
    /**
     * [EXPERIMENTAL] AddPolicyCollectionToRole: Add policy collections to a role
     *
     * Assigns policy collections to a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPolicyCollectionToRoleTest() throws ApiException {
        String scope = null;
        String code = null;
        AddPolicyCollectionToRoleRequest addPolicyCollectionToRoleRequest = null;
        RoleResponse response = api.addPolicyCollectionToRole(scope, code, addPolicyCollectionToRoleRequest);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] CreateRole: Create Role
     *
     * Creates a Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleTest() throws ApiException {
        RoleCreationRequest roleCreationRequest = null;
        RoleResponse response = api.createRole(roleCreationRequest);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] DeleteRole: Delete Role
     *
     * Deletes an identified Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        String code = null;
        String scope = null;
        api.deleteRole(code, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] GetRole: Get Role
     *
     * Gets an identified Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        String code = null;
        OffsetDateTime asAt = null;
        String scope = null;
        RoleResponse response = api.getRole(code, asAt, scope);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] ListRoles: List Roles
     *
     * Gets all Roles in a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRolesTest() throws ApiException {
        String scope = null;
        OffsetDateTime asAt = null;
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        List<RoleResponse> response = api.listRoles(scope, asAt, sortBy, start, limit, filter);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] RemovePolicyCollectionFromRole: Remove policy collection from role
     *
     * Removes a policy collection from a role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePolicyCollectionFromRoleTest() throws ApiException {
        String scope = null;
        String code = null;
        String policycollectionscope = null;
        String policycollectioncode = null;
        RoleResponse response = api.removePolicyCollectionFromRole(scope, code, policycollectionscope, policycollectioncode);

        // TODO: test validations
    }
    
    /**
     * [EARLY ACCESS] UpdateRole: Update Role
     *
     * Updates a Role
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        String code = null;
        RoleUpdateRequest roleUpdateRequest = null;
        String scope = null;
        String beforeScope = null;
        String beforeCode = null;
        String afterScope = null;
        String afterCode = null;
        RoleResponse response = api.updateRole(code, roleUpdateRequest, scope, beforeScope, beforeCode, afterScope, afterCode);

        // TODO: test validations
    }
    
}
