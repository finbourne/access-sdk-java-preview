/*
 * FINBOURNE Access Management API
 * ### Introduction    This page documents the LUSID Access Management APIs from FINBOURNE Technology, which allow authorised users to query and update their access control policies and roles within the LUSID platform's Identity and Access Management system.    
 *
 * The version of the OpenAPI document: 0.0.1950
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.access.api;

import com.finbourne.access.ApiException;
import com.finbourne.access.model.LusidProblemDetails;
import com.finbourne.access.model.LusidValidationProblemDetails;
import com.finbourne.access.model.ResourceListOfUserRoleResponse;
import com.finbourne.access.model.UserRoleCreationRequest;
import com.finbourne.access.model.UserRoleResponse;
import com.finbourne.access.model.UserRoleUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserRolesApi
 */
@Ignore
public class UserRolesApiTest {

    private final UserRolesApi api = new UserRolesApi();

    
    /**
     * [EXPERIMENTAL] CreateUserRole: Create a user-role
     *
     * Creates a new user-role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserRoleTest() throws ApiException {
        UserRoleCreationRequest userRoleCreationRequest = null;
        UserRoleResponse response = api.createUserRole(userRoleCreationRequest);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] DeleteUserRole: Delete a user-role
     *
     * Deletes an identified user-role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserRoleTest() throws ApiException {
        String userid = null;
        api.deleteUserRole(userid);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] GetUserRole: Gets a user-role
     *
     * Gets an identified user-role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRoleTest() throws ApiException {
        String userid = null;
        UserRoleResponse response = api.getUserRole(userid);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] ListUserRoles: List user-roles
     *
     * Lists all user-roles and pages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUserRolesTest() throws ApiException {
        Integer limit = null;
        String page = null;
        ResourceListOfUserRoleResponse response = api.listUserRoles(limit, page);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] UpdateUserRole: Update a user-role
     *
     * Updates an identified user-role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserRoleTest() throws ApiException {
        String userid = null;
        UserRoleUpdateRequest userRoleUpdateRequest = null;
        UserRoleResponse response = api.updateUserRole(userid, userRoleUpdateRequest);

        // TODO: test validations
    }
    
}
